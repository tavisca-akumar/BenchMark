// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d
// command took 2.88s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d
// command took 14.86s and exited with 1
// start dotnet build -c Release  --no-restore --no-dependencies /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d
// command took 4.17s and exited with 0
// ***** Done, took 00:00:22 (22.53 sec)   *****
// Found 2 benchmarks:
//   ForVsForeach.For: DefaultJob
//   ForVsForeach.Foreach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForeach.For: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "58d66706-98f1-4927-b48e-d9de7cfefd3d.dll" --benchmarkName "BenchMarkDotNetComparsion.ForVsForeach.For" --job "Default" --benchmarkId 0 in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 429219.29 ns, 429.2193 us/op
WorkloadJitting  1: 1 op, 931737.72 ns, 931.7377 us/op

OverheadJitting  2: 16 op, 298301.94 ns, 18.6439 us/op
WorkloadJitting  2: 16 op, 6472203.95 ns, 404.5127 us/op

WorkloadPilot    1: 16 op, 5444557.41 ns, 340.2848 us/op
WorkloadPilot    2: 32 op, 12783952.08 ns, 399.4985 us/op
WorkloadPilot    3: 64 op, 25268872.89 ns, 394.8261 us/op
WorkloadPilot    4: 128 op, 61966210.92 ns, 484.1110 us/op
WorkloadPilot    5: 256 op, 101169941.67 ns, 395.1951 us/op
WorkloadPilot    6: 512 op, 199004955.17 ns, 388.6816 us/op
WorkloadPilot    7: 1024 op, 373735134.13 ns, 364.9757 us/op
WorkloadPilot    8: 2048 op, 672830965.64 ns, 328.5307 us/op

OverheadWarmup   1: 2048 op, 9116.81 ns, 4.4516 ns/op
OverheadWarmup   2: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadWarmup   3: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadWarmup   4: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadWarmup   5: 2048 op, 7293.45 ns, 3.5613 ns/op
OverheadWarmup   6: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadWarmup   7: 2048 op, 4376.07 ns, 2.1368 ns/op

OverheadActual   1: 2048 op, 5105.41 ns, 2.4929 ns/op
OverheadActual   2: 2048 op, 4011.40 ns, 1.9587 ns/op
OverheadActual   3: 2048 op, 5105.41 ns, 2.4929 ns/op
OverheadActual   4: 2048 op, 5470.08 ns, 2.6709 ns/op
OverheadActual   5: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   6: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual   7: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   8: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   9: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual  10: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual  11: 2048 op, 4011.40 ns, 1.9587 ns/op
OverheadActual  12: 2048 op, 5105.41 ns, 2.4929 ns/op
OverheadActual  13: 2048 op, 5105.41 ns, 2.4929 ns/op
OverheadActual  14: 2048 op, 5470.08 ns, 2.6709 ns/op
OverheadActual  15: 2048 op, 11304.84 ns, 5.5199 ns/op
OverheadActual  16: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual  17: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  18: 2048 op, 20056.98 ns, 9.7934 ns/op
OverheadActual  19: 2048 op, 7658.12 ns, 3.7393 ns/op
OverheadActual  20: 2048 op, 4740.74 ns, 2.3148 ns/op

WorkloadWarmup   1: 2048 op, 1008318904.47 ns, 492.3432 us/op
WorkloadWarmup   2: 2048 op, 431404776.04 ns, 210.6469 us/op
WorkloadWarmup   3: 2048 op, 376687521.06 ns, 183.9295 us/op
WorkloadWarmup   4: 2048 op, 1604716744.44 ns, 783.5531 us/op
WorkloadWarmup   5: 2048 op, 420228664.12 ns, 205.1898 us/op
WorkloadWarmup   6: 2048 op, 377124398.47 ns, 184.1428 us/op
WorkloadWarmup   7: 2048 op, 385711337.08 ns, 188.3356 us/op
WorkloadWarmup   8: 2048 op, 443085594.42 ns, 216.3504 us/op
WorkloadWarmup   9: 2048 op, 3069238505.89 ns, 1.4987 ms/op
WorkloadWarmup  10: 2048 op, 432389026.57 ns, 211.1275 us/op

// BeforeActualRun
WorkloadActual   1: 2048 op, 408330136.37 ns, 199.3799 us/op
WorkloadActual   2: 2048 op, 385512590.68 ns, 188.2386 us/op
WorkloadActual   3: 2048 op, 367536799.08 ns, 179.4613 us/op
WorkloadActual   4: 2048 op, 375928638.01 ns, 183.5589 us/op
WorkloadActual   5: 2048 op, 370184684.64 ns, 180.7542 us/op
WorkloadActual   6: 2048 op, 380726266.76 ns, 185.9015 us/op
WorkloadActual   7: 2048 op, 379221628.86 ns, 185.1668 us/op
WorkloadActual   8: 2048 op, 380289754.02 ns, 185.6884 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at BenchMarkDotNetComparsion.ForVsForeach.For() in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\ForVsForeach.cs:line 25
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 731
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.RunAuto(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 168
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForeach.Foreach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "58d66706-98f1-4927-b48e-d9de7cfefd3d.dll" --benchmarkName "BenchMarkDotNetComparsion.ForVsForeach.Foreach" --job "Default" --benchmarkId 1 in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 475897.35 ns, 475.8973 us/op
WorkloadJitting  1: 1 op, 1201230.55 ns, 1.2012 ms/op

OverheadJitting  2: 16 op, 426666.59 ns, 26.6667 us/op
WorkloadJitting  2: 16 op, 6470380.59 ns, 404.3988 us/op

WorkloadPilot    1: 16 op, 5273890.78 ns, 329.6182 us/op
WorkloadPilot    2: 32 op, 12814584.56 ns, 400.4558 us/op
WorkloadPilot    3: 64 op, 26695835.59 ns, 417.1224 us/op
WorkloadPilot    4: 128 op, 49140321.52 ns, 383.9088 us/op
WorkloadPilot    5: 256 op, 92268655.54 ns, 360.4244 us/op
WorkloadPilot    6: 512 op, 184080741.36 ns, 359.5327 us/op
WorkloadPilot    7: 1024 op, 376430791.76 ns, 367.6082 us/op
WorkloadPilot    8: 2048 op, 657061076.78 ns, 320.8306 us/op

OverheadWarmup   1: 2048 op, 6199.43 ns, 3.0271 ns/op
OverheadWarmup   2: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadWarmup   3: 2048 op, 20421.65 ns, 9.9715 ns/op
OverheadWarmup   4: 2048 op, 13128.20 ns, 6.4103 ns/op
OverheadWarmup   5: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadWarmup   6: 2048 op, 18598.29 ns, 9.0812 ns/op
OverheadWarmup   7: 2048 op, 5105.41 ns, 2.4929 ns/op

OverheadActual   1: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   2: 2048 op, 4011.40 ns, 1.9587 ns/op
OverheadActual   3: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual   4: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   5: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   6: 2048 op, 16774.93 ns, 8.1909 ns/op
OverheadActual   7: 2048 op, 9846.15 ns, 4.8077 ns/op
OverheadActual   8: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual   9: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  10: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  11: 2048 op, 10210.82 ns, 4.9858 ns/op
OverheadActual  12: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  13: 2048 op, 4011.40 ns, 1.9587 ns/op
OverheadActual  14: 2048 op, 4376.07 ns, 2.1368 ns/op
OverheadActual  15: 2048 op, 8387.46 ns, 4.0954 ns/op
OverheadActual  16: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  17: 2048 op, 4740.74 ns, 2.3148 ns/op
OverheadActual  18: 2048 op, 22974.35 ns, 11.2179 ns/op
OverheadActual  19: 2048 op, 5105.41 ns, 2.4929 ns/op
OverheadActual  20: 2048 op, 10210.82 ns, 4.9858 ns/op

WorkloadWarmup   1: 2048 op, 947336214.73 ns, 462.5665 us/op
WorkloadWarmup   2: 2048 op, 367463135.28 ns, 179.4254 us/op
WorkloadWarmup   3: 2048 op, 338432302.96 ns, 165.2501 us/op
WorkloadWarmup   4: 2048 op, 1547197347.52 ns, 755.4675 us/op
WorkloadWarmup   5: 2048 op, 381259417.66 ns, 186.1618 us/op
WorkloadWarmup   6: 2048 op, 339572997.91 ns, 165.8071 us/op
WorkloadWarmup   7: 2048 op, 337468474.08 ns, 164.7795 us/op
WorkloadWarmup   8: 2048 op, 350634967.41 ns, 171.2085 us/op
WorkloadWarmup   9: 2048 op, 2752381310.11 ns, 1.3439 ms/op
WorkloadWarmup  10: 2048 op, 404215174.16 ns, 197.3707 us/op

// BeforeActualRun
WorkloadActual   1: 2048 op, 371722872.39 ns, 181.5053 us/op
WorkloadActual   2: 2048 op, 353896596.44 ns, 172.8011 us/op
WorkloadActual   3: 2048 op, 335657876.12 ns, 163.8954 us/op
WorkloadActual   4: 2048 op, 337293066.70 ns, 164.6939 us/op
WorkloadActual   5: 2048 op, 332249648.82 ns, 162.2313 us/op
WorkloadActual   6: 2048 op, 355293656.01 ns, 173.4832 us/op
WorkloadActual   7: 2048 op, 338942479.51 ns, 165.4993 us/op
WorkloadActual   8: 2048 op, 336588519.82 ns, 164.3499 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at BenchMarkDotNetComparsion.ForVsForeach.Foreach() in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\ForVsForeach.cs:line 38
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 1375
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.RunAuto(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 812
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\akumar\source\repos\BenchMarkDotNetComparsion\BenchMarkDotNetComparsion\bin\Release\netcoreapp2.2\58d66706-98f1-4927-b48e-d9de7cfefd3d\58d66706-98f1-4927-b48e-d9de7cfefd3d.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\BenchMarkDotNetComparsion.ForVsForeach-report.csv
  BenchmarkDotNet.Artifacts\results\BenchMarkDotNetComparsion.ForVsForeach-report-github.md
  BenchmarkDotNet.Artifacts\results\BenchMarkDotNetComparsion.ForVsForeach-report.html

// * Detailed results *
ForVsForeach.For: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForeach.Foreach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.885 (1803/April2018Update/Redstone4)
Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical and 2 physical cores
Frequency=2742188 Hz, Resolution=364.6723 ns, Timer=TSC
.NET Core SDK=2.2.108
  [Host] : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT  [AttachedDebugger]


|  Method | Mean | Error |
|-------- |-----:|------:|
|     For |   NA |    NA |
| Foreach |   NA |    NA |

Benchmarks with issues:
  ForVsForeach.For: DefaultJob
  ForVsForeach.Foreach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:32 (32.23 sec), executed benchmarks: 2

Global total time: 00:00:54 (54.77 sec), executed benchmarks: 2
// * Artifacts cleanup *
